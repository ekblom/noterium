<UserControl x:Class="Noterium.Components.NoteMenu.NoteMenu"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:viewModels1="clr-namespace:Noterium.ViewModels"
             xmlns:dragDrop="clr-namespace:GongSolutions.Wpf.DragDrop;assembly=GongSolutions.Wpf.DragDrop"
             xmlns:noteMenu="clr-namespace:Noterium.Components.NoteMenu"
             xmlns:converters="clr-namespace:Noterium.Code.Converters"
             xmlns:controls="clr-namespace:Noterium.Code.Controls"
             xmlns:p="clr-namespace:Noterium.Properties"
             xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300"
			 d:DataContext="{d:DesignInstance noteMenu:NoteMenuViewModel}" Loaded="NoteMenu_OnLoaded">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/Noterium;component/Resources/Styles.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.ListView.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <converters:BooleanToVisibilityConverter 
				x:Key="BooleanToVisibilityConverter" 
				True="Visible" 
				False="Collapsed" />
            <converters:BooleanToVisibilityConverter 
				x:Key="ReversedBooleanToVisibilityConverter" 
				True="Collapsed" 
				False="Visible" />

            <controls:BindingProxy x:Key="Proxy" Data="{Binding}" />
        </ResourceDictionary>
    </UserControl.Resources>

    <ListView Name="NotesList" 
				SelectedItem="{Binding SelectedNote, Mode=TwoWay}" 
				ItemsSource="{Binding DataSource, Mode=OneWay}"
				Background="{DynamicResource TransparentWhiteBrush}"
				dragDrop:DragDrop.IsDragSource="True"
				dragDrop:DragDrop.IsDropTarget="True"
				dragDrop:DragDrop.UseDefaultDragAdorner="True"
				dragDrop:DragDrop.DragHandler="{Binding}"
				BorderBrush="Transparent" BorderThickness="0"
                  
				VirtualizingStackPanel.IsVirtualizing="True"
				VirtualizingStackPanel.VirtualizationMode="Standard"
				ScrollViewer.IsDeferredScrollingEnabled="False"      
				ScrollViewer.HorizontalScrollBarVisibility="Disabled"
				Style="{DynamicResource VirtualisedMetroListBox}"
                  
				HorizontalAlignment="Stretch"
				HorizontalContentAlignment="Stretch">

        <ListView.Resources>
            <Style TargetType="ScrollViewer" BasedOn="{StaticResource TransparentScrollBars}" />
        </ListView.Resources>
        <ListView.ItemTemplate>
            <DataTemplate DataType="viewModels1:NoteViewModel">
                <DataTemplate.Resources>
                    <Style TargetType="{x:Type ListViewItem}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Visible}" Value="False">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </DataTemplate.Resources>
                <StackPanel Margin="5" Name="StackPanel">
                    <StackPanel.ContextMenu>
                        <ContextMenu>
                            <MenuItem Command="{Binding Data.DeleteItemCommand, Source={StaticResource Proxy}}"
                                              Visibility="{Binding Note.Protected, Converter={StaticResource ReversedBooleanToVisibilityConverter}, FallbackValue=Collapsed, Mode=OneWay}">
                                <MenuItem.Header>
                                    <StackPanel Orientation="Horizontal">
										<iconPacks:PackIconMaterial Name="DeleteNoteButton" Kind="Delete" VerticalAlignment="Center" Foreground="{DynamicResource IdealForegroundColorBrush}" />
										<TextBlock Text="{x:Static p:Resources.Delete}" VerticalAlignment="Center" Foreground="{DynamicResource IdealForegroundColorBrush}" />
                                    </StackPanel>
                                </MenuItem.Header>
                            </MenuItem>
                            <MenuItem Command="{Binding Data.RenameItemCommand, Source={StaticResource Proxy}}">
                                <MenuItem.Header>
                                    <StackPanel Orientation="Horizontal">
										<iconPacks:PackIconMaterial Name="RenameNoteButton" Kind="RenameBox" VerticalAlignment="Center" Foreground="{DynamicResource IdealForegroundColorBrush}" />
										<TextBlock Text="{x:Static p:Resources.Rename}" VerticalAlignment="Center" Foreground="{DynamicResource IdealForegroundColorBrush}" />
                                    </StackPanel>
                                </MenuItem.Header>
                            </MenuItem>
                            <Separator />
                            <MenuItem IsCheckable="True" IsChecked="{Binding Note.Encrypted, Mode=TwoWay}" StaysOpenOnClick="True"
                                          Visibility="{Binding IsSecureNotesEnabled, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed, Mode=OneWay}">
                                <MenuItem.Header>
                                    <StackPanel Orientation="Horizontal">
										<iconPacks:PackIconMaterial Kind="Lock" VerticalAlignment="Center" Foreground="{DynamicResource IdealForegroundColorBrush}" />
										<TextBlock Text="{x:Static p:Resources.Notes_Encrypted}" VerticalAlignment="Center" Foreground="{DynamicResource IdealForegroundColorBrush}" />
                                    </StackPanel>
                                </MenuItem.Header>
                            </MenuItem>
                            <MenuItem IsCheckable="True" IsChecked="{Binding Note.Protected, Mode=TwoWay}" StaysOpenOnClick="True">
                                <MenuItem.Header>
                                    <StackPanel Orientation="Horizontal">
										<iconPacks:PackIconMaterial Kind="Shield" VerticalAlignment="Center" Foreground="{DynamicResource IdealForegroundColorBrush}" />
										<TextBlock Text="{x:Static p:Resources.Notes_ProtectFromDelete}" VerticalAlignment="Center" Foreground="{DynamicResource IdealForegroundColorBrush}" />
                                    </StackPanel>
                                </MenuItem.Header>
                            </MenuItem>
                            <MenuItem IsCheckable="True" IsChecked="{Binding Note.Favourite, Mode=TwoWay}" StaysOpenOnClick="True">
                                <MenuItem.Header>
                                    <StackPanel Orientation="Horizontal">
										<iconPacks:PackIconMaterial Kind="Star" VerticalAlignment="Center" Foreground="{DynamicResource IdealForegroundColorBrush}" />
										<TextBlock Text="{x:Static p:Resources.Notes_Favourite}" VerticalAlignment="Center" Foreground="{DynamicResource IdealForegroundColorBrush}" />
                                    </StackPanel>
                                </MenuItem.Header>
                            </MenuItem>
                        </ContextMenu>
                    </StackPanel.ContextMenu>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="25" />
                        </Grid.ColumnDefinitions>
						<TextBlock Grid.Column="0" Grid.Row="0" Text="{Binding Note.Name}" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" MaxHeight="20" VerticalAlignment="Center" Foreground="{DynamicResource IdealForegroundColorBrush}" />

                        <StackPanel Orientation="Horizontal" Grid.Column="1" Grid.Row="0" VerticalAlignment="Center" HorizontalAlignment="Right">
							<iconPacks:PackIconMaterial Name="NoteLockIcon" Kind="Lock" Width="12" Height="12" Visibility="Collapsed" Foreground="{DynamicResource IdealForegroundColorBrush}" />
							<iconPacks:PackIconMaterial Name="NoteProtectedIcon" Kind="Shield" Width="12" Height="12" Visibility="Collapsed" Foreground="{DynamicResource IdealForegroundColorBrush}" />
                        </StackPanel>

                        <TextBlock Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="2" Text="{Binding CreatedDateText}" Foreground="Gray" MaxHeight="20" VerticalAlignment="Center" />
                        <Grid Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" Visibility="{Binding IsSelected, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed, Mode=OneWay}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition/>
                                <ColumnDefinition/>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>


                        </Grid>
                    </Grid>
                </StackPanel>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding Note.Encrypted}" Value="True">
                        <Setter TargetName="NoteLockIcon" Property="Visibility" Value="Visible" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Note.Protected}" Value="True">
                        <Setter TargetName="NoteProtectedIcon" Property="Visibility" Value="Visible" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
        </ListView.ItemTemplate>
        <ListBox.InputBindings>
            <KeyBinding Key="Delete" Command="{Binding DeleteItemCommand}" />
            <KeyBinding Key="F2" Command="{Binding RenameItemCommand}" />
        </ListBox.InputBindings>
        <i:Interaction.Triggers>
            <!--<i:EventTrigger EventName="SelectionChanged">
                        <commands1:CustomCommandInvoker Command="{Binding SelectedItemChangedCommand}"/>
                    </i:EventTrigger>-->
        </i:Interaction.Triggers>
    </ListView>
</UserControl>
